# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy backend application to Amazon ECS

on:
  push:
    branches:
      - main

env:
  WORK_DIR: public-api

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - "${{ env.WORK_DIR }}/**"

      - name: Early exit
        if: steps.changes.outputs.src != 'true' || github.ref != 'refs/heads/main'
        run: |
          gh run cancel ${{ github.run_id }}
          gh run watch ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: 7.4

      - name: Write value to Properties-file
        uses: christian-draeger/write-properties@1.0.1
        with:
          path: "${{ env.WORK_DIR }}/src/main/resources/application.properties"
          property: 'spring.datasource.url'
          value: ${{ vars.DB_URL }}

      - name: Write value to Properties-file
        uses: christian-draeger/write-properties@1.0.1
        with:
          path: "${{ env.WORK_DIR }}/src/main/resources/application.properties"
          property: 'spring.datasource.username'
          value: ${{ vars.DB_USERNAME }}

      - name: Write value to Properties-file
        uses: christian-draeger/write-properties@1.0.1
        with:
          path: "${{ env.WORK_DIR }}/src/main/resources/application.properties"
          property: 'spring.datasource.password'
          value: ${{ secrets.DB_PASSWORD }}

      - name: Write value to Properties-file
        uses: christian-draeger/write-properties@1.0.1
        with:
          path: "${{ env.WORK_DIR }}/src/main/resources/application.properties"
          property: 'spring.datasource.hikari.schema'
          value: ${{ vars.DB_SCHEMA }}

      - name: Write value to Properties-file
        uses: christian-draeger/write-properties@1.0.1
        with:
          path: "${{ env.WORK_DIR }}/src/main/resources/application.properties"
          property: 'aws.access-key'
          value: ${{ vars.AWS_ACCESS_KEY_ID }}

      - name: Write value to Properties-file
        uses: christian-draeger/write-properties@1.0.1
        with:
          path: "${{ env.WORK_DIR }}/src/main/resources/application.properties"
          property: 'aws.access-secret-key'
          value: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Write value to Properties-file
        uses: christian-draeger/write-properties@1.0.1
        with:
          path: "${{ env.WORK_DIR }}/src/main/resources/application.properties"
          property: 'google.oauth2.clientId'
          value: ${{ vars.GOOGLE_OAUTH2_CLIENT_ID }}

      - name: Write value to Properties-file
        uses: christian-draeger/write-properties@1.0.1
        with:
          path: "${{ env.WORK_DIR }}/src/main/resources/application.properties"
          property: 'google.oauth2.clientSecret'
          value: ${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}

      - name: Run build with Gradle Wrapper
        working-directory: ${{ env.WORK_DIR }}
        run: ./gradlew build

      - name: Run build with Gradle Wrapper
        working-directory: ${{ env.WORK_DIR }}
        run: ./gradlew bootJar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ${{ env.WORK_DIR }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        working-directory: ${{ env.WORK_DIR }}
        env:
          TASK_DEF: ${{ vars.ECS_TASK_DEFINITION }}
        run: |
          aws ecs describe-task-definition --task-definition $TASK_DEF --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: "${{ env.WORK_DIR }}/task-definition.json"
          container-name: ${{ vars.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true
